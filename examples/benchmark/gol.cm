def main() {
    let grid1 = [0, 0, 1, 0, 0,
                 0, 0, 0, 1, 0,
                 0, 1, 1, 1, 0,
                 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0]

    let grid2 = [0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0,
                 0, 0, 0, 0, 0]

    run(grid1, grid2, 5, 5, 20)
}

def run(grid1: Int[], grid2: Int[], w: Int, h: Int, gens: Int) {
    let fst = 1
    print_gen(0)
    println()
    print_grid(grid1, w, h)
    println()

    for let i in 0..<gens {
        print_gen(i+1)

        if fst == 1 {
            step(grid1, grid2, w, h)
            println()
            print_grid(grid2, w, h)
            fst = 0
        } else {
            step(grid2, grid1, w, h)
            println()
            print_grid(grid1, w, h)
            fst = 1
        }
        println()
    }
}

def step(grid: Int[], new_grid: Int[], w: Int, h: Int) {
    for let y in 0..<h {
        for let x in 0..<w {
            let n = num_neighbours(grid, x, y, w, h)
            if grid[y * w + x] == 1 {
                if n < 2 {
                    new_grid[y * w + x] = 0
                }
                if n == 2 or n == 3 {
                    new_grid[y * w + x] = 1
                }
                if n > 3 {
                    new_grid[y * w + x] = 0
                }

            } else {
                if n == 3 {
                    new_grid[y * w + x] = 1
                } else {
                    new_grid[y * w + x] = 0
                }
            }
        }
    }
}

def num_neighbours(grid: Int[], x: Int, y: Int, w: Int, h: Int) {
    let total = 0
    for let i in 0-1..<2 {
        for let j in 0-1..<2 {
            let x2 = wrap(x + i, w)
            let y2 = wrap(y + j, w)
            total = total + grid[y2 * w + x2]
        }
    }
    return total - grid[y * w + x]
}

def wrap(x: Int, n: Int) -> Int {
    if x < 0 {
        return n - 1
    }
    if x == n {
        return 0
    }
    return x
}

def print_gen(gen: Int) {
    let s = "Gen "
    print_str(s)
    print(gen)
}

def print_grid(grid: Int[], w: Int, h: Int) {
    for let y in 0..<h {
        for let x in 0..<w {
            if grid[y * w + x] == 1 {
                printc('#')
            } else {
                printc('.')
            }
        }
        println()
    }
}

def print_str(s: Str) {
    let i = 0
    while s[i] != 0 {
        printc(s[i])
        i = i + 1
    }
}
